[{"E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\index.js":"1","E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\App.js":"2","E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\reportWebVitals.js":"3","E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\Authentication\\SignIn\\SignIn.jsx":"4","E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\Chat\\Chat.jsx":"5","E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\API\\UserAPI.jsx":"6","E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\API\\axiosClient.jsx":"7","E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\Chat\\Component\\ListUser.jsx":"8","E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\API\\MessengerAPI.jsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":5244,"mtime":1609573484394,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":3301,"mtime":1609587849918,"results":"14","hashOfConfig":"11"},{"size":15982,"mtime":1609914029175,"results":"15","hashOfConfig":"11"},{"size":190,"mtime":1609575678177,"results":"16","hashOfConfig":"11"},{"size":815,"mtime":1609575668633,"results":"17","hashOfConfig":"11"},{"size":1605,"mtime":1609591272423,"results":"18","hashOfConfig":"11"},{"size":348,"mtime":1609596383279,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"8pv868",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\index.js",[],["42","43"],"E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\App.js",[],"E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\reportWebVitals.js",[],"E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\Authentication\\SignIn\\SignIn.jsx",[],"E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\Chat\\Chat.jsx",["44","45","46","47","48","49","50","51","52","53","54","55","56","57","58"],"import React, { useEffect, useState } from 'react';\r\nimport './Chat.css'\r\nimport UserAPI from '../API/UserAPI';\r\nimport ListUser from './Component/ListUser';\r\nimport queryString, { stringify } from 'query-string'\r\nimport MessengerAPI from '../API/MessengerAPI';\r\nimport parse from 'html-react-parser';\r\n\r\nimport io from \"socket.io-client\";\r\nconst socket = io(\"http://localhost:3000\");\r\n\r\nfunction Chat(props) {\r\n\r\n    if (!sessionStorage.getItem('user_id')) {\r\n        window.location.replace(\"/SignIn\");\r\n    }\r\n\r\n    const [name, setName] = useState('')\r\n\r\n    const [userID1, setUserID1] = useState(sessionStorage.getItem('user_id'))\r\n    const [userID2, setUserID2] = useState('')\r\n\r\n    const [listUser, setListUser] = useState([])\r\n\r\n    const [anotherUser, setAnotherUser] = useState({})\r\n\r\n    const [conversation, setConversation] = useState([])\r\n\r\n    const [load, setLoad] = useState(false)\r\n\r\n    const [send, setSend] = useState('')\r\n\r\n    const [loadMessage, setLoadMessage] = useState(false)\r\n\r\n\r\n    const [messReceive, setMessReceive] = useState('')\r\n    const [user1_Receive, setUser1Receive] = useState('')\r\n    const [user2_Receive, setUser2Receive] = useState('')\r\n\r\n    //Hàm này sẽ render ra người mà user định chat\r\n    //Nó sẽ nhận dữ liệu từ component ListUser gửi lên xong sau đó nó sẽ setUserID2\r\n    //Tiếp theo nó sẽ setLoad để gọi lại hàm useEffect load dữ liệu tin nhắn ra\r\n    const GetUserID = (value) => {\r\n        \r\n        const id_another = value\r\n\r\n        const another = listUser.find(value => {\r\n            return value._id === id_another\r\n        })\r\n\r\n        console.log(another)\r\n\r\n        setAnotherUser(another)\r\n\r\n        setLoad(true)\r\n\r\n        setUserID2(id_another)\r\n\r\n    }\r\n\r\n    //Hàm này chỉ chạy 1 lần duy nhất dùng để load những người bạn của user\r\n    //Trừ user ra\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n\r\n            const response = await UserAPI.getAll()\r\n            console.log(response)\r\n\r\n            const filterUser = response.filter(value => {\r\n                return value._id !== sessionStorage.getItem('user_id')\r\n            })\r\n            console.log(filterUser)\r\n\r\n            setListUser(filterUser)\r\n        }\r\n\r\n        fetchData()\r\n\r\n        console.log(name)\r\n\r\n    }, [])\r\n\r\n\r\n    const onChangeSend = (e) => {\r\n\r\n        const value = e.target.value\r\n\r\n        setSend(value)\r\n\r\n        const data = {\r\n            message: value,\r\n            id_user1: userID2,\r\n            id_user2: userID1\r\n        }\r\n\r\n        // console.log(data)\r\n\r\n        //Nếu user đang bấm phím để gửi tin nhắn thì sẽ gửi socket lên server với key keyboard_message_send\r\n        //Để cho đối phương biết là user đang gửi tin nhắn\r\n        //Vì gửi là user muốn gửi đến người nào\r\n        //Nên chúng ta phải lấy id_user của đối phương mà user muốn gửi\r\n        if (send){\r\n            socket.emit('keyboard_message_send', data)   \r\n        }else{\r\n            socket.emit('keyboard_message_send', data)\r\n        }\r\n    \r\n    }\r\n\r\n    //Client nhận dữ liệu từ server gửi xuống thông qua socket\r\n    useEffect(() => {\r\n\r\n        socket.on('keyboard_message_receive', (data) => {\r\n            \r\n            const message = data.message\r\n            const id_user1 = data.id_user1\r\n            const id_user2 = data.id_user2\r\n\r\n            //Ở bên phía người nhận thì sẽ có userID1 của chính mình\r\n            //Nếu mà có tin nhắn và đúng với id_user của người gửi đúng với userID1 của chính mình thì sẽ load\r\n            if (message !== '' && id_user1 === userID1 && id_user2 === userID2){\r\n                setLoadMessage(true)\r\n            }else{\r\n                setLoadMessage(false)\r\n            }\r\n\r\n        })\r\n\r\n    }, [])\r\n\r\n    \r\n    //Hàm này dùng để gửi tin nhắn\r\n    const handlerSend = () => {\r\n        \r\n        //Nếu User chưa bấm vào thì không thể gửi được\r\n        if (!userID2){\r\n            return\r\n        }\r\n\r\n        //Gọi hàm formaticon đã tạo sẵn để xử lý\r\n        const formatMessage = formatIcon(send)\r\n\r\n        //Khi gửi tin nhắn thì nó sẽ lấy id của cả 2 người\r\n        //Với cái key category có value là send\r\n        //Vì là gửi tin nhắn\r\n        const data = {\r\n            id_user1: userID1,\r\n            id_user2: userID2,\r\n            id: Math.random().toString(),\r\n            message: formatMessage, \r\n            name: sessionStorage.getItem('name_user'),\r\n            category: \"send\"\r\n        }\r\n\r\n        console.log(data.name + \": \" + data.message)\r\n\r\n        //Sau đó nó emit dữ liệu lên server bằng socket với key send_message và value data\r\n        socket.emit('send_message', data)\r\n\r\n\r\n        //Tiếp theo nó sẽ postdata lên api đưa dữ liệu vào database\r\n        const postData = async () => {\r\n\r\n            const query = '?' + queryString.stringify(data)\r\n\r\n            const response = await MessengerAPI.postMessage(query)\r\n\r\n            console.log(response)\r\n\r\n            //Sau đó gọi hàm setLoad để useEffect lấy lại dữ liệu sau khi update\r\n            setLoad(true)\r\n\r\n        }\r\n\r\n        postData()\r\n\r\n        setSend('')\r\n\r\n    }\r\n\r\n    //Hàm này dùng để format icon\r\n    function formatIcon(send) {\r\n        \r\n        //Đây là list icon dùng để duyệt và đổ ra dữ liệu\r\n        const icon = [\r\n            { id: 1, image: `<img src='https://www.flaticon.com/svg/static/icons/svg/742/742760.svg' />`, category: ':('},\r\n            { id: 2, image: `<img src='https://www.flaticon.com/svg/static/icons/svg/742/742750.svg' />`, category: '*_*'},\r\n            { id: 3, image: `<img src='https://www.flaticon.com/svg/static/icons/svg/742/742920.svg' />`, category: ':)'},\r\n            { id: 4, image: `<img src='https://www.flaticon.com/svg/static/icons/svg/742/742822.svg' />`, category: 'T_T'},\r\n            { id: 5, image: `<img src='https://www.flaticon.com/svg/static/icons/svg/742/742787.svg' />`, category: '-,-'},\r\n            { id: 6, image: `<img src='https://www.flaticon.com/svg/static/icons/svg/742/742745.svg' />`, category: ':*'},\r\n        ]\r\n\r\n        //Duyệt vòng foreach của list icon để kiểm tra chuỗi truyền vào có tồn tại category không\r\n        //Nếu trong cái chuỗi string đó có tồn tại category của icon thì nó sẽ replace thành thẻ <image>\r\n        icon.forEach(element => {\r\n            if (send.indexOf(element.category) > -1){\r\n                console.log(\"True\")\r\n\r\n                //Replace\r\n                send = send.replace(element.category, element.image)\r\n\r\n            }\r\n        });\r\n\r\n        return send\r\n    }\r\n\r\n    //Đây là hàm lấy dữ liệu từ api dựa vào state load\r\n    useEffect(() => {\r\n\r\n        if (load){\r\n            const fetchData = async () => {\r\n\r\n                const params = {\r\n                    id_user1: userID1,\r\n                    id_user2: userID2\r\n                }\r\n    \r\n                const query = '?' + queryString.stringify(params)\r\n    \r\n                const response = await MessengerAPI.getAllMessage(query)\r\n                console.log(response.content)\r\n    \r\n                setConversation(response.content)\r\n\r\n            }\r\n    \r\n            fetchData()\r\n        }\r\n\r\n        setLoad(false)\r\n\r\n    }, [load])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        //Nhận dữ liệu từ server gửi lên thông qua socket với key receive_message\r\n        socket.on('receive_message', (data) => {\r\n            \r\n            //Sau đó nó sẽ setLoad gọi lại hàm useEffect lấy lại dữ liệu\r\n            setLoad(true)\r\n  \r\n        })\r\n\r\n    }, [])\r\n\r\n    //Click hiện danh sách Icon\r\n    const [emotion, setEmotion] = useState(false)\r\n    const onClickEmotion = () => {\r\n        \r\n        setEmotion(!emotion)\r\n\r\n    }\r\n\r\n    //Click vào từng icon nó sẽ nhận cái value truyền vào theo từng loại\r\n    const onClickIcon = (value) => {\r\n        \r\n        setSend(send + \"\" + value + \" \")\r\n \r\n    }\r\n\r\n    return (\r\n        <div className=\"container app\">\r\n            <div className=\"row app-one\">\r\n                <div className=\"col-sm-4 side\">\r\n                    <div className=\"side-one\">\r\n                        <div className=\"row heading\">\r\n                            <div className=\"col-sm-3 col-xs-3 heading-avatar\">\r\n                                <div className=\"heading-avatar-icon\">\r\n                                    <img src={sessionStorage.getItem('image_user')} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-sm-9 col-xs-1 d-flex align-items-center\">\r\n                                <span>{sessionStorage.getItem('name_user')}</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row searchBox\">\r\n                            <div className=\"col-sm-12 searchBox-inner\">\r\n                                <div className=\"form-group has-feedback\">\r\n                                    <input\r\n                                        id=\"searchText\"\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        name=\"searchText\"\r\n                                        placeholder=\"Search\"\r\n                                    />\r\n                                    <span className=\"glyphicon glyphicon-search form-control-feedback\"></span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <ListUser listUser={listUser} GetUserID={GetUserID}/>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-sm-8 conversation\">\r\n                    <div className=\"row heading\">\r\n                        {\r\n                            anotherUser && (<div className=\"col-sm-2 col-md-1 col-xs-3 heading-avatar\">\r\n                            <div className=\"heading-avatar-icon\">\r\n                                <img src={anotherUser.image} />\r\n                            </div>\r\n                        </div>)\r\n                        }\r\n                        <div className=\"col-sm-8 col-xs-7 heading-name\">\r\n                            <a className=\"heading-name-meta\">{anotherUser.name}</a>\r\n                            <span className=\"heading-online\">Online</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row message\" id=\"conversation\">\r\n                        <div className=\"row message-previous\">\r\n                            <div className=\"col-sm-12 previous\">\r\n                                \r\n                                {\r\n                                    conversation && conversation.map(value => (\r\n                                        value.category === 'send' ? (\r\n                                            <div className=\"message-main-sender\" key={value.id}>\r\n                                                <div className=\"sender\">\r\n                                                    <span className=\"message-time pull-right\">Bạn</span>\r\n                                                    <div className=\"message-text\">\r\n                                                    {\r\n                                                        parse(value.message)\r\n                                                    }\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div className=\"message-main-receiver\" key={value.id}>\r\n                                                <div className=\"receiver\">\r\n                                                    <span className=\"message-time pull-right\">{value.name}</span>\r\n                                                    <div className=\"message-text\">\r\n                                                    {\r\n                                                        parse(value.message)\r\n                                                    }\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    ))\r\n                                }         \r\n                                {\r\n                                    loadMessage && (<div className=\"wrapper_loading\">\r\n                                    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n                                </div>)\r\n                                } \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {\r\n                        emotion && (<div className=\"show_icon\">\r\n                        <div className=\"list_icon\">\r\n                            <div className=\"icon\" onClick={() => onClickIcon(\":(\")}>\r\n                                <img className=\"img_icon\" src=\"https://www.flaticon.com/svg/static/icons/svg/742/742760.svg\" alt=\"\"/>\r\n                            </div>\r\n                            <div className=\"icon\" onClick={() => onClickIcon(\"*_*\")}>\r\n                                <img className=\"img_icon\" src=\"https://www.flaticon.com/svg/static/icons/svg/742/742750.svg\" alt=\"\"/>\r\n                            </div>\r\n                            <div className=\"icon\" onClick={() => onClickIcon(\":)\")}>\r\n                                <img className=\"img_icon\" src=\"https://www.flaticon.com/svg/static/icons/svg/742/742920.svg\" alt=\"\"/>\r\n                            </div>\r\n                            <div className=\"icon\" onClick={() => onClickIcon(\"T_T\")}>\r\n                                <img className=\"img_icon\" src=\"https://www.flaticon.com/svg/static/icons/svg/742/742822.svg\" alt=\"\"/>\r\n                            </div>\r\n                            <div className=\"icon\" onClick={() => onClickIcon(\"-,-\")}>\r\n                                <img className=\"img_icon\" src=\"https://www.flaticon.com/svg/static/icons/svg/742/742787.svg\" alt=\"\"/>\r\n                            </div>\r\n                            <div className=\"icon\" onClick={() => onClickIcon(\":*\")}>\r\n                                <img className=\"img_icon\" src=\"https://www.flaticon.com/svg/static/icons/svg/742/742745.svg\" alt=\"\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>)\r\n                    }\r\n\r\n                    <div className=\"row reply\">\r\n                        <div className=\"col-sm-1 col-xs-1 reply-emojis\">\r\n                            <i className=\"fa fa-smile-o fa-2x\" onClick={onClickEmotion}></i>\r\n                        </div>\r\n                        <div className=\"col-sm-9 col-xs-9 reply-main\">\r\n                            <input className=\"form-control\" type=\"text\" value={send} onChange={onChangeSend} />\r\n                        </div>\r\n                        <div className=\"col-sm-1 col-xs-1 reply-recording\">\r\n                            <i className=\"fa fa-microphone fa-2x\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                        <div className=\"col-sm-1 col-xs-1 reply-send\">\r\n                            <i className=\"fa fa-send fa-2x\" aria-hidden=\"true\" onClick={handlerSend}></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;","E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\API\\UserAPI.jsx",[],"E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\API\\axiosClient.jsx",[],["59","60"],"E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\Chat\\Component\\ListUser.jsx",["61"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nListUser.propTypes = {\r\n    listUser: PropTypes.array,\r\n    GetUserID: PropTypes.func\r\n};\r\n\r\nListUser.defaultProps = {\r\n    listUser: [],\r\n    GetUserID: null\r\n}\r\n\r\nfunction ListUser(props) {\r\n\r\n    const { listUser, GetUserID } = props\r\n\r\n    const onClickUser = (user_id) => {\r\n        \r\n        GetUserID(user_id)\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                listUser && listUser.map(value => (\r\n                    <div className=\"row sideBar-body\" key={value._id} onClick={() => onClickUser(value._id)}>\r\n                        <div className=\"col-sm-3 col-xs-3 sideBar-avatar\">\r\n                            <div className=\"avatar-icon\">\r\n                                <img src={value.image} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-9 col-xs-9 sideBar-main\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-8 col-xs-8 sideBar-name\">\r\n                                    <span className=\"name-meta\">{value.name}</span>\r\n                                </div>\r\n                                <div className=\"col-sm-4 col-xs-4 pull-right sideBar-time\">\r\n                                    <span className=\"time-meta pull-right\">Online</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListUser;","E:\\ReactJS\\React_ChatOOP\\client_chat\\src\\API\\MessengerAPI.jsx",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":5,"column":23,"nodeType":"68","messageId":"69","endLine":5,"endColumn":32},{"ruleId":"66","severity":1,"message":"70","line":18,"column":18,"nodeType":"68","messageId":"69","endLine":18,"endColumn":25},{"ruleId":"66","severity":1,"message":"71","line":20,"column":21,"nodeType":"68","messageId":"69","endLine":20,"endColumn":31},{"ruleId":"66","severity":1,"message":"72","line":36,"column":12,"nodeType":"68","messageId":"69","endLine":36,"endColumn":23},{"ruleId":"66","severity":1,"message":"73","line":36,"column":25,"nodeType":"68","messageId":"69","endLine":36,"endColumn":39},{"ruleId":"66","severity":1,"message":"74","line":37,"column":12,"nodeType":"68","messageId":"69","endLine":37,"endColumn":25},{"ruleId":"66","severity":1,"message":"75","line":37,"column":27,"nodeType":"68","messageId":"69","endLine":37,"endColumn":42},{"ruleId":"66","severity":1,"message":"76","line":38,"column":12,"nodeType":"68","messageId":"69","endLine":38,"endColumn":25},{"ruleId":"66","severity":1,"message":"77","line":38,"column":27,"nodeType":"68","messageId":"69","endLine":38,"endColumn":42},{"ruleId":"78","severity":1,"message":"79","line":82,"column":8,"nodeType":"80","endLine":82,"endColumn":10,"suggestions":"81"},{"ruleId":"78","severity":1,"message":"82","line":130,"column":8,"nodeType":"80","endLine":130,"endColumn":10,"suggestions":"83"},{"ruleId":"78","severity":1,"message":"82","line":235,"column":8,"nodeType":"80","endLine":235,"endColumn":14,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":273,"column":37,"nodeType":"87","endLine":273,"endColumn":87},{"ruleId":"85","severity":1,"message":"86","line":306,"column":33,"nodeType":"87","endLine":306,"endColumn":64},{"ruleId":"88","severity":1,"message":"89","line":311,"column":29,"nodeType":"87","endLine":311,"endColumn":62},{"ruleId":"62","replacedBy":"90"},{"ruleId":"64","replacedBy":"91"},{"ruleId":"85","severity":1,"message":"86","line":31,"column":33,"nodeType":"87","endLine":31,"endColumn":58},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'stringify' is defined but never used.","Identifier","unusedVar","'setName' is assigned a value but never used.","'setUserID1' is assigned a value but never used.","'messReceive' is assigned a value but never used.","'setMessReceive' is assigned a value but never used.","'user1_Receive' is assigned a value but never used.","'setUser1Receive' is assigned a value but never used.","'user2_Receive' is assigned a value but never used.","'setUser2Receive' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.","ArrayExpression",["94"],"React Hook useEffect has missing dependencies: 'userID1' and 'userID2'. Either include them or remove the dependency array.",["95"],["96"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["92"],["93"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [name]",{"range":"103","text":"104"},"Update the dependencies array to be: [userID1, userID2]",{"range":"105","text":"106"},"Update the dependencies array to be: [load, userID1, userID2]",{"range":"107","text":"108"},[2281,2283],"[name]",[3715,3717],"[userID1, userID2]",[7126,7132],"[load, userID1, userID2]"]